# train.prototxt for Mean + LogCoral loss

name: "dslr_to_amazon"
layer {
  name: "source_data"
  type: "ImageData"
  top: "source_data"
  top: "lp_labels"
  image_data_param {
    source: "#TODO (Path to your source image list.txt)"
    root_folder:'#TODO (Path to your source image root folder)'
    batch_size: 128
    shuffle: true
    new_height: 256
    new_width: 256
  }
  transform_param {
    crop_size: 227
    mean_file: "#TODO (Path to mean image)"
    mirror: true
  }
  include: { phase: TRAIN }
}
layer {
  name: "target_data"
  type: "ImageData"
  top: "target_data"
  top: "target_label"
  image_data_param {
    source: "#TODO (Path to your target image list.txt)"
    root_folder:'#TODO (Path to your target image root folder)'
    batch_size: 128
    shuffle: true
    new_height: 256
    new_width: 256
  }
  transform_param {
    crop_size: 227
    mean_file: "#TODO (Path to mean image)"
    mirror: true
  }
  include: { phase: TRAIN }
}
layer {
  name: "target_label_silence"
  type: "Silence"
  bottom: "target_label"
  include: { phase: TRAIN}
}
layer {
  name: "target_data"
  type: "ImageData"
  top: "data"
  top: "lp_labels"
  image_data_param {
    source: "#TODO (Path to your target image list.txt)"
    root_folder:'#TODO (Path to your target image root folder)'
    batch_size: 1
    shuffle: true
    new_height: 256
    new_width: 256
  }
  transform_param {
    crop_size: 227
    mean_file: "#TODO (Path to mean image)"
    mirror: false
  }
  include: { phase: TEST }
}

# ------- source and target data concatenation

layer {
  name: "concat_data"
  type: "Concat"
  bottom: "source_data"
  bottom: "target_data"
  top: "data"
  concat_param {
    concat_dim: 0
  }
  include: { phase: TRAIN }
}

# -------- convolution

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_alias"
  type: "Split"
  bottom: "fc7"
  top: "data_fc7"
#  include: { phase: TRAIN }
}
layer {
  name: "slice_mean"
  type: "Slice"
  bottom: "fc7"
  top: "source_features_fc7"
  top: "target_features_fc7"
  slice_param {
    slice_dim: 0
  }
  include: { phase: TRAIN }
}

layer {
    name: "fc7_source_r"
    type: "Reshape"
    bottom: "source_features_fc7"
    top: "source_features_fc7_r"
    reshape_param {
      shape {
        dim: 1
        dim: 1
        dim: 128
        dim: 4096
      }
 }
include: { phase: TRAIN }
}

layer {
    name: "fc7_target_r"
    type: "Reshape"
    bottom: "target_features_fc7"
    top: "target_features_fc7_r"
    reshape_param {
      shape{
    dim: 1
    dim: 1
    dim: 128
    dim: 4096
    }
}
include: { phase: TRAIN }
}



layer {
  name: "reduction_source"
  type: "Pooling"
  bottom: "source_features_fc7_r"
  top: "source_mean_fc7"
  pooling_param {
    pool: AVE
    kernel_h: 128
    kernel_w: 1
  }
include: { phase: TRAIN }

}

layer {
  name: "reduction_target"
  type: "Pooling"
  bottom: "target_features_fc7_r"
  top: "target_mean_fc7"
  pooling_param {
    pool: AVE
    kernel_h: 128
    kernel_w: 1
  }
include: { phase: TRAIN }

}

layer {
  name: "Source _MA"
  type: "MOVINGAVERAGE"
  bottom: "source_mean_fc7"
  top: "source_mean_fc7_m"
  include: { phase: TRAIN }
}

layer { 
  name: "Target _MA"
  type: "MOVINGAVERAGE"
  bottom: "target_mean_fc7"
  top: "target_mean_fc7_m"
  include: { phase: TRAIN }
}

#-----------mean loss

layer {
  name: "Mean_loss"
  type: "EuclideanLoss"
  bottom: "source_mean_fc7_m"
  bottom: "target_mean_fc7_m"
  top: "Mean_loss"
  loss_weight: #TODO (Depends on the source and target domain) # A-W:0.02 D-W:0.002 A-D:0.0025 W-D:0.001 W-A:0.0035 D-A:0.0001
  include: { phase: TRAIN }
}

layer {
  name: "fc8-finetune"
  type: "InnerProduct"
  bottom: "data_fc7"
  top: "fc8-finetune"
  param {
    name: "fc8_w"
    lr_mult: 10
    decay_mult: 1
  }
  param {
    name: "fc8_b"
    lr_mult: 20
    decay_mult: 0
  }
  inner_product_param {
    num_output: 31
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "fc8-finetune_alias"
  type: "Split"
  bottom: "fc8-finetune"
  top: "source_features_fc8"
  include: { phase: TEST }
}
layer {
  name: "slice_features_fc8"
  type: "Slice"
  bottom: "fc8-finetune"
  top: "source_features_fc8"
  top: "target_features_fc8"
  slice_param {
    slice_dim: 0
  }
  include: { phase: TRAIN }
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "source_features_fc8"
  bottom: "lp_labels"
  top: "lp_accuracy"
  include: { phase: TEST }
}

#-----------classification loss

layer {
  name: "softmax_loss"
  type: "SoftmaxWithLoss"
  bottom: "source_features_fc8"
  bottom: "lp_labels"
  top: "softmax_loss"
  loss_weight: 1
  include: { phase: TRAIN }
}


layer {
  name: "Cs"
  type: "COVARIANCE"
  bottom: "source_features_fc8"
  top: "Cs"
  include: { phase: TRAIN }
}
layer {
  name: "Ct"
  type: "COVARIANCE"
  bottom: "target_features_fc8"
  top: "Ct"
  include: { phase: TRAIN }
}

layer {
    name: "Cs_r"
    type: "Reshape"
    bottom: "Cs"
    top: "Cs_r"
    reshape_param {
      shape {
        dim: -1
        dim: 1
        dim: 1
        dim: 1
      }
 }
include: { phase: TRAIN }

  }


layer {
    name: "Ct_r"
    type: "Reshape"
    bottom: "Ct"
    top: "Ct_r"
    reshape_param {
      shape {
        dim: -1
        dim: 1
        dim: 1
        dim: 1
      }
    }
include: { phase: TRAIN }
  }

#-----------LogCoral loss

layer {
  name: "Coral"
  type: "EuclideanLoss"
  bottom: "Cs_r"
  bottom: "Ct_r"
  top: "Coral"
  loss_weight: #TODO (Depends on the source and target domain) # A-W:30 D-W:0.5 A-D:30 W-D:0.1 W-A:15 D-A:0.01
  include: { phase: TRAIN }
}
